import decimal
import random
import math

import subprocess


def convert_py_decimal_to_4_ints(decimal_num: decimal.Decimal) -> tuple[int, int, int, int]:
    decimal_tuple = decimal_num.as_tuple()
    decimal_int = 0
    digits_exp = 0
    for digit in reversed(decimal_tuple.digits):
        decimal_int += digit * (10 ** digits_exp)
        digits_exp += 1

    third_int = abs(abs(decimal_tuple.sign << 31) + abs(decimal_tuple.exponent << 16))
    zer_int = decimal_int % (2**32)
    decimal_int //= 2 ** 32
    first_int = decimal_int % (2 ** 32)
    decimal_int //= 2 ** 32
    return zer_int, first_int, decimal_int, third_int


def convert_4_ints_to_py_decimal(c_decimal: tuple[int, int, int, int]) -> decimal.Decimal:
    sign = c_decimal[3] >> 31
    exp = ((c_decimal[3]) >> 16) % 32
    decimal_int = int(2 ** 64) * c_decimal[2] + int(2 ** 32) * c_decimal[1] + c_decimal[0]
    decimal_digits = []
    while decimal_int:
        decimal_digits.append(decimal_int % 10)
        decimal_int //= 10
    return decimal.Decimal((sign, tuple(reversed(decimal_digits)), -exp))


def generate_random_decimal() -> decimal.Decimal:
    new_exp = random.randint(-28, 0)
    new_sign = random.randint(0, 1)
    decimal_int = random.randint(0, int(2**96) - 1)
    decimal_digits = []
    while decimal_int:
        decimal_digits.append(decimal_int % 10)
        decimal_int //= 10
    return decimal.Decimal((new_sign, tuple(reversed(decimal_digits)), new_exp))


# decimal.getcontext().Emax = 28
# decimal.getcontext().Emin = 0

# decimal_number1 = decimal.Decimal('792281625142643375935.43950335')
# print('0x%08X 0x%08X 0x%08X 0x%08X' % convert_py_decimal_to_4_ints(decimal_number1))

# print(convert_4_ints_to_py_decimal((0x77D5E3AA, 0x0000011C, 0x00000000, 0x00060000)))
# print(convert_4_ints_to_py_decimal((0x12a495, 0x00000000, 0x00000000, 0x60000)))
# x = 396140812663555.40835774234624
# print(x)
# str_int = x.__str__()
# dec = decimal.Decimal(str_int)
# print('0x%08X 0x%08X 0x%08X 0x%08X' % convert_py_decimal_to_4_ints(dec))
# str_int = round(x).__str__()
# dec = decimal.Decimal(str_int)
# print('0x%08X 0x%08X 0x%08X 0x%08X' % convert_py_decimal_to_4_ints(dec))



decimalus = [(0xCEDBB4F0, 0x32, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0x3BA4D753, 0x0, 0x0, 0x0),
(0x3E8, 0x0, 0x0, 0x0),
(0xFBE91C38, 0xE8, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x4, 0x0, 0x0, 0x0),
(0xAF0DA5C4, 0x1E, 0x0, 0x0),
(0x2738, 0x0, 0x0, 0x0),
(0xD68879A8, 0x132, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x4, 0x0, 0x0, 0x0),
(0x89AD0334, 0x68, 0x0, 0x0),
(0x273C, 0x0, 0x0, 0x0),
(0x89AD0334, 0x68, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0x633F47FA, 0x3, 0x0, 0x0),
(0xF5438, 0x0, 0x0, 0x0),
(0xC4B81DA8, 0x152, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x4, 0x0, 0x0, 0x0),
(0x77DCA734, 0x88, 0x0, 0x0),
(0xF543C, 0x0, 0x0, 0x0),
(0x77DCA734, 0x88, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0x516EEBFA, 0x23, 0x0, 0x0),
(0x994A6C, 0x0, 0x0, 0x0),
(0x2E5537C4, 0x161, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x4, 0x0, 0x0, 0x0),
(0xE179C150, 0x96, 0x0, 0x0),
(0x994A70, 0x0, 0x0, 0x0),
(0xE179C150, 0x96, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0xBB0C0616, 0x31, 0x0, 0x0),
(0x5FCE874, 0x0, 0x0, 0x0),
(0x4E783CDC, 0x1F1, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x8, 0x0, 0x0, 0x0),
(0xB4C14FF4, 0x5C, 0x0, 0x0),
(0x5FCE87C, 0x0, 0x0, 0x0),
(0xB4C14FF4, 0x5C, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0x218A7257, 0x2A, 0x0, 0x0),
(0x3BE114E2, 0x0, 0x0, 0x0),
(0x4F687766, 0x1A5, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x8, 0x0, 0x0, 0x0),
(0xB5B18A7E, 0x10, 0x0, 0x0),
(0x56CAD124, 0x2, 0x0, 0x0),
(0x18EF68EC, 0xA7, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0xF281ADB2, 0x41, 0x0, 0x0),
(0x56CAD126, 0x2, 0x0, 0x0),
(0xF281ADB2, 0x41, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0x5F4AD015, 0xF, 0x0, 0x0),
(0x63EC2B86, 0x17, 0x0, 0x0),
(0xB8EC20D2, 0x99, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0x927E6598, 0x34, 0x0, 0x0),
(0x63EC2B88, 0x17, 0x0, 0x0),
(0x927E6598, 0x34, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0xFF4787FB, 0x1, 0x0, 0x0),
(0x8410184, 0x923, 0x0, 0x0),
(0xB7F11E0C, 0xC7, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0x918362D2, 0x62, 0x0, 0x0),
(0x8410186, 0x923, 0x0, 0x0),
(0x918362D2, 0x62, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0xFE4C8535, 0x2F, 0x0, 0x0),
(0x528A0F46, 0x5B5E, 0x0, 0x0),
(0xEEFD3412, 0x1DF, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x8, 0x0, 0x0, 0x0),
(0x5546472A, 0x4B, 0x0, 0x0),
(0x528A0F4E, 0x5B5E, 0x0, 0x0),
(0x5546472A, 0x4B, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0xC20F698D, 0x18, 0x0, 0x0),
(0x39649916, 0x391AF, 0x0, 0x0),
(0x949A1F82, 0xF7, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x4, 0x0, 0x0, 0x0),
(0x47BEA90E, 0x2D, 0x0, 0x0),
(0x3DEDFB04, 0x23B0D8, 0x0, 0x0),
(0xCD729A8C, 0x1C4, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x8, 0x0, 0x0, 0x0),
(0x33BBADA4, 0x30, 0x0, 0x0),
(0x6B4BCE78, 0x164E872, 0x0, 0x0),
(0x554C868, 0x1E2, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x8, 0x0, 0x0, 0x0),
(0x6B9DDB80, 0x4D, 0x0, 0x0),
(0x6B4BCE80, 0x164E872, 0x0, 0x0),
(0x6B9DDB80, 0x4D, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0xD866FDE3, 0x1A, 0x0, 0x0),
(0x30F6110A, 0xDF11478, 0x0, 0x0),
(0x7405EADE, 0x10C, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x4, 0x0, 0x0, 0x0),
(0x272A746A, 0x42, 0x0, 0x0),
(0x30F6110E, 0xDF11478, 0x0, 0x0),
(0x272A746A, 0x42, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0x93F396CD, 0xF, 0x0, 0x0),
(0xE99CAA96, 0x8B6ACCB1, 0x0, 0x0),
(0xC783E402, 0x9B, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0xA11628C8, 0x36, 0x0, 0x0),
(0xE99CAA98, 0x8B6ACCB1, 0x0, 0x0),
(0xA11628C8, 0x36, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0xDDF4B2B, 0x4, 0x0, 0x0),
(0x4132A3C4, 0x75B7F57F, 0x36, 0x0),
(0x6B395CCC, 0x195, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x8, 0x0, 0x0, 0x0),
(0xD1826FE4, 0x0, 0x0, 0x0),
(0x77C7FBB0, 0xFBDBE5B5, 0x1545, 0x0),
(0xD6F3B510, 0x51, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x1, 0x0, 0x0, 0x0),
(0x43BCD773, 0x1F, 0x0, 0x0),
(0xADCFD4EA, 0xD696F916, 0xD4BB, 0x0),
(0xA5606A7E, 0x138, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x4, 0x0, 0x0, 0x0),
(0x5884F40A, 0x6E, 0x0, 0x0),
(0xADCFD4EE, 0xD696F916, 0xD4BB, 0x0),
(0x5884F40A, 0x6E, 0x0, 0x0),
(0x9336DD9D, 0x32, 0x0, 0x0),
(0x2, 0x0, 0x0, 0x0),
(0x321738D0, 0x9, 0x0, 0x0),
(0xADCFD4F0, 0xD696F916, 0xD4BB, 0x0),
(0xADCFD4F1, 0xD696F916, 0xD4BB, 0x1C0000),


]
j = 0
for i in decimalus:
    if j == 0:
        print(f"DELIMOE = ",end = '')
    if j == 1:
        print(f"DELITEL = ",end = '')
    if j == 3:
        print(f"OSTATOK = ",end = '')
    if j == 2:
        print(f"CHASTNOE = ",end = '')
    if j == 4:
        print(f"TMP RESULT = ",end = '')
    j = (j+1) % 5
    # print("// ", end = '')
    print(convert_4_ints_to_py_decimal((i)))
    # print(f"({j})")
    # j = j+1
# print(convert_4_ints_to_py_decimal((0x14490831, 0x48e23, 0x0, 0x70000)))
# print(convert_4_ints_to_py_decimal((0x22, 0x0, 0x0, 0x0)))




# new_decimal = generate_random_decimal()
# print(new_decimal)
# print('0x%08X 0x%08X 0x%08X 0x%08X' % convert_py_decimal_to_4_ints(new_decimal))
#687194767 4123168604 42949672
#792281625142643375935439
#792281625142643375935440

# -3.9614081266355540835774234624
# -3.961408126635554
